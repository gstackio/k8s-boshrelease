---
meta:
  name:    k8s
  release: Kubernetes Bosh Release
  target:  (( grab meta.team ))
  url:     https://ci.gstack.io
  team:    gk-plat-devs

  test-errands: ~

  initial_version: "1.19.0"

  manifest:
    directory: manifests
    path:      (( concat meta.manifest.directory "/" meta.bosh.deployment ".yml" ))

  git:
    email:  ((git-commit-email))
    name:   ((git-commit-name))

  image:
    name: (( concat meta.private-registry.host "/gstack/gk-ops" ))
    registry:
      username: (( grab meta.private-registry.username ))
      password: (( grab meta.private-registry.password ))

  private-registry:
    host:       harbor.ci.gstack.io
    username:   ((private-registry-username))
    password:   ((private-registry-password))

  aws:
    bucket:      (( concat "gk-" meta.pipeline ))
    region_name: eu-west-3
    access_key:  ((aws-access-key))
    secret_key:  ((aws-secret-key))

  github:
    owner:        gstackio
    repo:         (( grab meta.pipeline ))
    branch:       master
    private_key:  ((github-private-key))
    access_token: ((github-access-token))

  bosh:
    deployment: tinynetes
    stemcell:
      cpi: warden-boshlite
      os: ubuntu-jammy

  slack:
    webhook:       ((slack-webhook))
    username:      ((slack-username))
    icon:          ((slack-icon-url))
    channel:       "#oss-pipelines-notifications"
    # blob_success:  '(( concat ": New version of  was detected, and updated in master. <" meta.url "/teams//pipelines/| Cut a new release?>" ))'
    # blob_failure:  '(( concat ": :airplane_arriving: <" meta.url "/teams//pipelines//jobs//builds/| Failed to update the blob for >" ))'

# would need to find back the bump jobs

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - (( append ))
      - build-images
  - name: bump
    jobs:
      - bump-deps

jobs:
  - name: bump-deps
    public: true
    serial: true
    plan:
      - in_parallel:
          - { get: weekly, trigger: true }
          - { get: jammy-latest, params: { format: oci } }
          - { get: alpine-latest,       params: { format: oci } }

    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: build-images
    public: true
    serial: true
    plan:
      - in_parallel:
          - { get: git, trigger: true }
          - { get: version, params: { bump: final } }
          - { get: docker-image-build-task }
          - { get: jammy-latest,  passed: [ bump-deps ], trigger: true, params: { format: oci } }
          - { get: alpine-latest, passed: [ bump-deps ], trigger: true, params: { format: oci } }

      - load_var: version
        file: version/number

      - in_parallel:
          - do:
              - task: build-kube-proxy-image
                <<: &build_image
                  image: docker-image-build-task
                  privileged: true
                  config:
                    platform: linux
                    inputs:
                      - { name: git, path: "." }
                      - { name: jammy-latest }
                      - { name: alpine-latest }
                    outputs: [ name: image ]
                    caches:  [ path: cache ]
                    run:     { path: build }
                params:
                  <<: &image_arg
                    IMAGE_ARG_ubuntu: jammy-latest/image.tar
                    IMAGE_ARG_alpine: alpine-latest/image.tar
                  CONTEXT:            images/kube-proxy
                output_mapping:
                  image: built-kube-proxy-image

              - put: kube-proxy-image
                inputs: [ built-kube-proxy-image ]
                params:
                  image:   built-kube-proxy-image/image.tar
                  version: ((.:version))

          - do:
              - task: build-smoke-test-image
                <<: *build_image
                params:
                  <<: *image_arg
                  CONTEXT: images/smoke-test
                output_mapping:
                  image: built-smoke-test-image

              - put: smoke-test-image
                inputs: [ built-smoke-test-image ]
                params:
                  image:   built-smoke-test-image/image.tar
                  version: ((.:version))

    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.fail_text ))

  - name: testflight
    plan:
      - (( inline ))
      - {} # in_parallel:
      - task: testflight
        config:
          caches: [ path: git/blobs ]

resources:

  - name: git
    check_every: 24h
    webhook_token: ((concourse-webhook-token))

  - name: git-pull-requests
    check_every: 24h
    webhook_token: ((concourse-webhook-token))

  - name: version
    icon: github
    source:
      bucket:            (( prune ))
      region_name:       (( prune ))
      key:               (( prune ))
      access_key_id:     (( prune ))
      secret_access_key: (( prune ))
      driver:      git
      uri:         git@github.com:gstackio/gk-pipelines-compass.git
      branch:      master
      file:        (( concat "versions/" meta.pipeline ))
      private_key: ((github-private-key))
      git_user:    "((git-commit-name)) <((git-commit-email))>"

  - name: weekly
    type: time
    icon: alarm
    source:
      location: Europe/Paris
      start:    "3:00"
      stop:     "4:30"
      days:     [ Saturday ]

  - name: docker-image-build-task
    type: registry-image
    icon: docker
    source:
      repository: concourse/oci-build-task

  - name: jammy-latest
    type: registry-image
    icon: docker
    check_every: 24h
    source:
      repository: ubuntu
      tag:        jammy

  - name: alpine-latest
    type: registry-image
    icon: docker
    check_every: 24h
    source:
      repository:        alpine
      semver_constraint: "< 1970" # Avoid YYYYMMDD tags like '20231219'

  - name: kube-proxy-image
    type: registry-image
    icon: docker
    source:
      username:   (( grab meta.private-registry.username ))
      password:   (( grab meta.private-registry.password ))
      repository: (( concat meta.private-registry.host "/huntprod/k8s-bosh-kube-proxy" ))

  - name: smoke-test-image
    type: registry-image
    icon: docker
    source:
      username:   (( grab meta.private-registry.username ))
      password:   (( grab meta.private-registry.password ))
      repository: (( concat meta.private-registry.host "/huntprod/k8s-bosh-smoke-test" ))
